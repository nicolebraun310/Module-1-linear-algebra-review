{"title":"1.1 - data as vectors","markdown":{"yaml":{"title":"1.1 - data as vectors","format":{"revealjs":{"slide-number":true}},"editor_options":{"chunk_output_type":"console","mode":"source"}},"headingText":"What is a vector?","containsRefs":false,"markdown":"\n\n\n::: incremental\n-   A $p$-vector can be thought of as:\n    -   a coordinate in $p$-dimensional space;\n    -   a specification of *magnitude* and *direction* in $p$-dimensional space\n-   Vectors can be expressed in *row* or *column* format.\n    -   $u = (3,1)$ is a 2-dimensional *row* vector\n    -   $v = \\begin{pmatrix}4\\\\-1\\\\2\\end{pmatrix}$ is a 3-dimensional *column* vector\n:::\n\n## What is a vector?\n\n::: column\n-   2-dimensional vectors are easy to visualize in a Cartesian plane\n-   For example, consider $u = (3, 2)$\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nlibrary(tidyverse)\n\n# Create a data frame with start and end points\ndf <- data.frame(\n  x = 0, y = 0,    # start point\n  xend = 3, yend = 2  # end point\n)\n\n# Create the plot\nggplot(data=df) +\n  geom_segment(aes(x=x, y=y, xend=xend, yend=yend),\n               arrow=arrow(length=unit(0.2,\"inches\")), \n               color=\"blue\", linewidth=1.2) +\n  geom_point(aes(xend, yend), size= 2, color='red') + \n    geom_text(aes(xend, yend, label='(3,2)'), nudge_x = .5) + \n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  ggtitle('A vector in 2-dimensional space') + \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Data as vectors {.smaller}\n\n::: column\nA typical data frame can be thought of as a series of row vectors:\n\n```{r}\n#| echo: true \nhead(cars)\n```\n\nWe have $n$ 2-dimensional vectors:\n\n-   The vector (4, 2);\n-   The vector (4, 10);\\\n-   etc.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nggplot(data=head(cars)) +\n  geom_point(aes(speed, dist), size= 2, color='red') + \n  scale_x_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) +\n  scale_y_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) + \n  labs(x='speed', y = 'distance') + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 12) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Data as vectors {.smaller}\n\n::: column\nA typical data frame can be thought of as a series of row vectors:\n\n```{r}\n#| echo: true \nhead(cars)\n```\n\nWe have $n$ 2-dimensional vectors:\n\n-   The vector (4, 2);\n-   The vector (4, 10);\n-   etc.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nggplot(data=head(cars)) +\n  geom_point(aes(speed, dist), size= 2, color='red') + \n    geom_segment(aes(x=0, y=0, xend=speed, yend=dist),\n               arrow=arrow(length=unit(0.2,\"inches\")), \n               color=\"grey\", linewidth=1) +\n  scale_x_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) +\n  scale_y_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) + \n  labs(x='speed', y = 'distance') + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 12) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Higher dimensions {.smaller}\n\n-   Of course, in practice we have more than 2 columns of data.\n-   Below is a 3D scatter plot and vector plot of $n=10$ vectors of $p=3$ columns:\n\n::: column\n```{r}\nto_plot <- scale(iris %>% select(Sepal.Length, Sepal.Width, Petal.Length) %>% head(10)) %>% data.frame\n\nlibrary(\"matlib\")\nlibrary(rgl)\nwith(to_plot, \n     plot3d( \n        x=Sepal.Length, y=Sepal.Width, z=Petal.Length,colvar=NULL,\n        #theta = 30, phi = 20,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\n)\nrglwidget(width = 400, height = 400)\n```\n:::\n\n::: column\n```{r}\nvectors3d(as.matrix(to_plot),labels = FALSE, headlength= 0.1)\nrglwidget(width = 400, height = 400)\n```\n:::\n\nCan you visualize the data set that would yield these plots?\n\n## Scalar multiplication {.smaller}\n\nMultiplying by a scalar $c$ can affect both magnitude and direction:\n\n-   If $|c|>1$, $cu$ lengthens the vector\n-   If $|c| < 1$, $cu$ shortens the vector\n-   If $c < 0$, $cu$ reverse the vector\n\n<center>\n\n![](images/clipboard-1367738802.png)\n\n## Vector addition\n\n-   Adding two vectors is as simple as adding the \"steps\" in each direction.\n-   Consider $u = (3,1)$ and $v = (1,4)$, then $u + v = (4,5)$:\n\n![](images/clipboard-3324724953.png){fig-align=\"center\" width=\"1800\"}\n\n## Vector subtraction\n\nTo subtract vectors, e.g. $u-v$:\n\n-   Go in the $u$ direction;\n\n-   Stop and go in the negative $v$ direction\n\n## Vector subtraction\n\nWhich of these shows $u-v$? What is the value of $u-v$?: middle (2, -3) Of $v-u$?: right (-2, 3)\n\n![](images/clipboard-1009912734.png)\n\n## Vector norms\n\n-   An important characteristic of a vector is its *norm*.\n\n-   Norm $\\equiv$ size, or length\n\n-   There are many ways to measure the norm of a vector. Two important measures in data science include:\n\n    -   L1 norm (aka \"Taxicab\" or \"Manhattan\")\n\n    -   L2 norm (aka \"Euclidean\" norm)\n\n-   *Norms are always* $\\geq 0$! CANNOT BE NEGATIVE\n\n## L1 (\"taxicab\") norm example\n\nConsider the vector $u = (3,2)$:\n\n![](images/clipboard-533404553.png)\n\n$$\n||u||_1 = 5\n$$\n\n## L1 (\"taxicab\") norm example\n\nNow consider $v = (-4, -5)$: DOWN/LEFT IS NOT NEGATIVE\n\n![](images/clipboard-333534670.png)\n\n$$\n||v||_1 = 9\n$$\n\n## L1 norm, formally defined - abs value of coordinates summed\n\nGiven a $p$-vector $u = (u_1, u_2, ...,u_p)$:\n\n$$\n||u||_1 = \\sum_{i=1}^p |u_i|\n$$\n\n## L2 norm {.smaller}\n\n-   Taxicabs are inefficient ways of moving from $A$ to $B$!\n\n-   Recall again $u = (3,2)$.\n\n-   Imagine you are a helicopter, you can fly straight from the origin $(0,0)$ to $(3,2)$. How far did you fly?\n\n![](images/clipboard-2632451596.png){fig-align=\"center\"}\n\nPythagorean!\n\n$$\n||u||_2 = \\sqrt{3^2 + 2^2} = \\sqrt{13} = 3.61\n$$\n\n## L2 norm of $v$\n\nWhat is the L2 norm of $v = (-4, -5)$?\n\n![](images/clipboard-2866215374.png){fig-align=\"center\"}\n\n## L2 norm, formally defined - (a^2^ + b^2^ )\\^1/2\n\nGiven a $p$-vector $u = (u_1, u_2, ...,u_p)$:\n\n$$\n||u||_2 = \\sqrt{\\sum_{i=1}^p u_i^2}\n$$\n\n## Vectors in `R`\n\nThe following code can be used to create vectors $u$ and $v$ from the previous examples, and compute their norms:\n\n::: column\n```{r}\n#| echo: true\nu <- c(3,2)\nv <- c(-4,5)\n```\n\n```{r}\n#| echo: true\n#L1 norms:\nsum(abs(u))\nsum(abs(v))\n#L2 norms:\nsqrt(sum(u^2))\nsqrt(sum(v^2))\n```\n:::\n\n::: column\n```{r}\n#| echo: true\n#NOT an L2 norm:\nsum(sqrt(v^2))\n#NOT an L2 norm:\nsqrt(sum(v))^2\n```\n:::\n\n## Mean vectors {.smaller}\n\n*Scaling* is an important concept in this class, and one important scaling ingredient is the *mean vector*.\n\n::: column\n-   Consider the plot of the `cars` data set.\\\n-   The complete data set has $n=50$ rows (i.e., 2-dimensional vectors)\n-   The red diamond in the middle is the *mean vector*\n    -   Horizontal coordinate: mean of top density (Speed)\n    -   Vertical coordinate: mean of right density (Stopping distance)\n:::\n\n::: column\n```{r}\n#| fig-align: right\n#| fig-asp: 1\n# Load required libraries\nlibrary(ggplot2)\nlibrary(ggExtra)\n\n# Make the base scatterplot\np <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 15.4, y = 42.98), pch=18) + \n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\np_with_marginals <- ggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n\n# Display the plot\nprint(p_with_marginals)\n```\n:::\n\n## Mean vector formally defined\n\nGiven $n$ $p-$dimensional vectors $u_i$, the *mean vector* $m$ is simply:\n\n$$m = \\frac{1}{n} \\cdot \\sum_{i=1}^n u_i$$\n\n## Calculating mean vectors in `R`\n\nThere are two ways to find mean vectors in `R`:\n\n1.  `dplyr` approach (allows you to specify which column to average):\n\n```{r}\n#| echo: true\n\n(cars\n %>% summarize(across(.cols = c(speed, dist), .fns = mean))\n)\n```\n\n2.  Base `R` approach (requires all columns to be numeric):\n\n```{r}\n#| echo: true\n\napply(cars, 2, FUN = mean)\n```\n\n## Mean-centering : scale function in R {.smaller}\n\n-   Subtracting the mean vector from the data yields *mean-centered* data: all columns have mean 0.\n\n-   The best way to mean-center columns in `R` is with the `scale` command:\n\n-   `scale` both centers and standardizes (more later); for now we just want centering:\n\n```{r}\n#| echo: true\ncars_centered <- scale(cars, center = TRUE, scale = FALSE)\n```\n\n```{r}\n#| fig-asp: 1\n#| fig-align: center\n\n# Make the base scatterplot\np <- ggplot(cars_centered, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Code for previous plot\n\n```{r}\n#| eval: false\n#| echo: true\n# Make the base scatterplot\nlibrary(tidyverse)\np <- ggplot(cars_centered, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nlibrary(ggExtra)\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Std dev scaling {.smaller}\n\n-   After mean centering, dividing by the standard deviation results in $p-$ vectors that are elementwise mean 0 and standard deviation = 1.\n-   Important implications for measuring length and (later) distance between vectors.\n-   Finding standard deviation vectors:\n\n::: {.column width=\"60%\"}\n`dplyr` approach:\n\n```{r}\n#| echo: true\n(cars\n %>% summarize(across(.cols = c(speed, dist), .fns = sd))\n )\n```\n:::\n\n::: {.column width=\"40%\"}\nBase `R` approach:\n\n```{r}\n#| echo: true\napply(cars, 2, FUN = sd)\n```\n:::\n\n## Full scaling {.smaller}\n\nThe complete scaling can be completed with:\n\n```{r}\n#| echo: true\ncars_scaled <- scale(cars, center = TRUE, scale = TRUE)\n```\n\nNote the attributes return the mean and standard deviation vectors:\n\n```{r}\n#| echo: true\nattr(cars_scaled, \"scaled:center\")\nattr(cars_scaled, \"scaled:scale\")\n```\n\n## Plot of scaled data\n\n```{r}\n#| fig-asp: 1\n#| fig-align: center\n# Make the base scatterplot\np <- ggplot(cars_scaled, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Distances between vectors\n\n-   We've considered the norm (\"length\") of a single vector.\n-   **Distance between vectors** is an important concept in this class, and is related to vector norms.\n-   We'll talk a lot more about distances later; going to consider a more formal vector-based definition now.\n\n## Distance visualized\n\nConsider two vectors $u = (3,1)$ and $v = (1,4)$:\n\n![](images/clipboard-503625232.png){fig-align=\"center\"}\n\n## Distance visualized\n\nSubtracting $u$ from $v$ yields the vector $(-2, 3)$:\n\n![](images/clipboard-292842847.png){fig-align=\"center\"}\n\n## Distance visualized\n\nNote that this vector is exactly the right magnitude and direction for traveling from $u$ to $v$:\n\n![](images/clipboard-2204196700.png){fig-align=\"center\"}\n\n## Distance defined {.smaller}\n\n-   We define the *distance between* vectors$u$ and $v$ be the norm (recall: length) of the vector $u-v$ (or equivalently, the norm of the vector $v-u$).\n\n-   Accordingly, distance can *also* be defined in L1 (\"taxicab\" or \"Manhattan\") or L2 (\"Euclidean\") form.\n\n    $$\n    ||u-v||_1 = \\sum_{i=1}^p |u_i -v_i|\n    $$\n\n$$\n||u-v||_2 = \\sqrt{\\sum_{i=1}^p (u_i -v_i)^2}\n$$\n\n## Calculating distance for example {.smaller}\n\n-   L1 distance: $|3-1| + |1-4| = 5$\n-   L2 distance: $\\sqrt{(3-1)^2 + (1-4)^2} = \\sqrt{13} = 3.61$\n\n![](images/clipboard-503625232.png){fig-align=\"center\"}\n\n## Air pollution data {.smaller}\n\nConsider the `USairpollution` data set from the `HSAUR2` package:\n\n```{r}\n#| echo: true\nlibrary(HSAUR2)\ndata(\"USairpollution\")\nhead(USairpollution)\n```\n\n## Air pollution data {.smaller}\n\n*Pairs plots* are useful ways of visualizing multidimensional data. The `ggpairs` function from `GGally` produces:\n\n```{r}\n#| echo: true\n#| fig-asp: 1\n#| fig-align: center\n\nlibrary(GGally)\nggpairs(data = USairpollution) + \n  theme_bw()\n```\n\n## The `dist` function {.smaller}\n\n-   The `dist()` function can be used to compute distances between $n$ vectors of $p$ dimensions, arranged in 1-row-per-*p*-vector data frames.\n-   By default, `method = 'euclidean'` (L2 distances); see `?dist` for other options.\n-   The following code all pairwise distances between 41 cities in the `USairpollution` data set from the `HSAUR2` package:\n\n```{r}\n#| echo: true\npollution_dist <- dist(USairpollution) \n```\n\nBy default, a distance matrix is lower-triangular. First 6 rows:\n\n``` r\n                Albany Albuquerque  Atlanta Baltimore  Buffalo   Charleston  \nAlbuquerque     155.825                                                                                                                                 \nAtlanta         501.437     415.667                                                                                                                     \nBaltimore       980.193     881.700  482.856                                                                                                            \nBuffalo         492.975     423.745   69.447   504.518                                                                                                  \nCharleston       51.163     199.113  541.855  1022.395  530.326                                                                                         \nChicago        4634.251    4545.006 4136.752  3669.934 4144.490   4672.609 \n```\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n) \n```\n\n1.  Converge `dist` object to a matrix\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n  %>% mutate(CityA = rownames(.)) #<3>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n3.  Create new column moving the rownames to an actual variable\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n  %>% mutate(CityA = rownames(.)) #<3>\n  %>% pivot_longer(cols = -CityA, \n                   names_to = 'CityB', \n                   values_to = 'Distance') #<4>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n3.  Create new column moving the rownames to an actual variable\n4.  Pivot the data\n\n## Result {.smaller}\n\nWe're primed to play!\n\n```{r}\n#| echo: true\nhead(distance_df)\n```\n","srcMarkdownNoYaml":"\n\n## What is a vector?\n\n::: incremental\n-   A $p$-vector can be thought of as:\n    -   a coordinate in $p$-dimensional space;\n    -   a specification of *magnitude* and *direction* in $p$-dimensional space\n-   Vectors can be expressed in *row* or *column* format.\n    -   $u = (3,1)$ is a 2-dimensional *row* vector\n    -   $v = \\begin{pmatrix}4\\\\-1\\\\2\\end{pmatrix}$ is a 3-dimensional *column* vector\n:::\n\n## What is a vector?\n\n::: column\n-   2-dimensional vectors are easy to visualize in a Cartesian plane\n-   For example, consider $u = (3, 2)$\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nlibrary(tidyverse)\n\n# Create a data frame with start and end points\ndf <- data.frame(\n  x = 0, y = 0,    # start point\n  xend = 3, yend = 2  # end point\n)\n\n# Create the plot\nggplot(data=df) +\n  geom_segment(aes(x=x, y=y, xend=xend, yend=yend),\n               arrow=arrow(length=unit(0.2,\"inches\")), \n               color=\"blue\", linewidth=1.2) +\n  geom_point(aes(xend, yend), size= 2, color='red') + \n    geom_text(aes(xend, yend, label='(3,2)'), nudge_x = .5) + \n  scale_x_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) +\n    scale_y_continuous(breaks=seq(-5,5,by=1),limits=c(-5,5)) + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  ggtitle('A vector in 2-dimensional space') + \n  theme_minimal(base_size = 14) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Data as vectors {.smaller}\n\n::: column\nA typical data frame can be thought of as a series of row vectors:\n\n```{r}\n#| echo: true \nhead(cars)\n```\n\nWe have $n$ 2-dimensional vectors:\n\n-   The vector (4, 2);\n-   The vector (4, 10);\\\n-   etc.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nggplot(data=head(cars)) +\n  geom_point(aes(speed, dist), size= 2, color='red') + \n  scale_x_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) +\n  scale_y_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) + \n  labs(x='speed', y = 'distance') + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 12) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Data as vectors {.smaller}\n\n::: column\nA typical data frame can be thought of as a series of row vectors:\n\n```{r}\n#| echo: true \nhead(cars)\n```\n\nWe have $n$ 2-dimensional vectors:\n\n-   The vector (4, 2);\n-   The vector (4, 10);\n-   etc.\n:::\n\n::: column\n```{r}\n#| fig-width: 5\n#| fig-height: 5\n#| fig-align: 'right'\nggplot(data=head(cars)) +\n  geom_point(aes(speed, dist), size= 2, color='red') + \n    geom_segment(aes(x=0, y=0, xend=speed, yend=dist),\n               arrow=arrow(length=unit(0.2,\"inches\")), \n               color=\"grey\", linewidth=1) +\n  scale_x_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) +\n  scale_y_continuous(breaks=seq(0,25,by=1),limits=c(0,25)) + \n  labs(x='speed', y = 'distance') + \n  geom_vline(aes(xintercept = 0)) +  geom_hline(aes(yintercept = 0)) +  \n  theme_minimal(base_size = 12) + \n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n## Higher dimensions {.smaller}\n\n-   Of course, in practice we have more than 2 columns of data.\n-   Below is a 3D scatter plot and vector plot of $n=10$ vectors of $p=3$ columns:\n\n::: column\n```{r}\nto_plot <- scale(iris %>% select(Sepal.Length, Sepal.Width, Petal.Length) %>% head(10)) %>% data.frame\n\nlibrary(\"matlib\")\nlibrary(rgl)\nwith(to_plot, \n     plot3d( \n        x=Sepal.Length, y=Sepal.Width, z=Petal.Length,colvar=NULL,\n        #theta = 30, phi = 20,\n        bty='b2',pch=19,cex=1.2,\n  xlab=\"x\", ylab=\"y\", zlab=\"z\")\n)\nrglwidget(width = 400, height = 400)\n```\n:::\n\n::: column\n```{r}\nvectors3d(as.matrix(to_plot),labels = FALSE, headlength= 0.1)\nrglwidget(width = 400, height = 400)\n```\n:::\n\nCan you visualize the data set that would yield these plots?\n\n## Scalar multiplication {.smaller}\n\nMultiplying by a scalar $c$ can affect both magnitude and direction:\n\n-   If $|c|>1$, $cu$ lengthens the vector\n-   If $|c| < 1$, $cu$ shortens the vector\n-   If $c < 0$, $cu$ reverse the vector\n\n<center>\n\n![](images/clipboard-1367738802.png)\n\n## Vector addition\n\n-   Adding two vectors is as simple as adding the \"steps\" in each direction.\n-   Consider $u = (3,1)$ and $v = (1,4)$, then $u + v = (4,5)$:\n\n![](images/clipboard-3324724953.png){fig-align=\"center\" width=\"1800\"}\n\n## Vector subtraction\n\nTo subtract vectors, e.g. $u-v$:\n\n-   Go in the $u$ direction;\n\n-   Stop and go in the negative $v$ direction\n\n## Vector subtraction\n\nWhich of these shows $u-v$? What is the value of $u-v$?: middle (2, -3) Of $v-u$?: right (-2, 3)\n\n![](images/clipboard-1009912734.png)\n\n## Vector norms\n\n-   An important characteristic of a vector is its *norm*.\n\n-   Norm $\\equiv$ size, or length\n\n-   There are many ways to measure the norm of a vector. Two important measures in data science include:\n\n    -   L1 norm (aka \"Taxicab\" or \"Manhattan\")\n\n    -   L2 norm (aka \"Euclidean\" norm)\n\n-   *Norms are always* $\\geq 0$! CANNOT BE NEGATIVE\n\n## L1 (\"taxicab\") norm example\n\nConsider the vector $u = (3,2)$:\n\n![](images/clipboard-533404553.png)\n\n$$\n||u||_1 = 5\n$$\n\n## L1 (\"taxicab\") norm example\n\nNow consider $v = (-4, -5)$: DOWN/LEFT IS NOT NEGATIVE\n\n![](images/clipboard-333534670.png)\n\n$$\n||v||_1 = 9\n$$\n\n## L1 norm, formally defined - abs value of coordinates summed\n\nGiven a $p$-vector $u = (u_1, u_2, ...,u_p)$:\n\n$$\n||u||_1 = \\sum_{i=1}^p |u_i|\n$$\n\n## L2 norm {.smaller}\n\n-   Taxicabs are inefficient ways of moving from $A$ to $B$!\n\n-   Recall again $u = (3,2)$.\n\n-   Imagine you are a helicopter, you can fly straight from the origin $(0,0)$ to $(3,2)$. How far did you fly?\n\n![](images/clipboard-2632451596.png){fig-align=\"center\"}\n\nPythagorean!\n\n$$\n||u||_2 = \\sqrt{3^2 + 2^2} = \\sqrt{13} = 3.61\n$$\n\n## L2 norm of $v$\n\nWhat is the L2 norm of $v = (-4, -5)$?\n\n![](images/clipboard-2866215374.png){fig-align=\"center\"}\n\n## L2 norm, formally defined - (a^2^ + b^2^ )\\^1/2\n\nGiven a $p$-vector $u = (u_1, u_2, ...,u_p)$:\n\n$$\n||u||_2 = \\sqrt{\\sum_{i=1}^p u_i^2}\n$$\n\n## Vectors in `R`\n\nThe following code can be used to create vectors $u$ and $v$ from the previous examples, and compute their norms:\n\n::: column\n```{r}\n#| echo: true\nu <- c(3,2)\nv <- c(-4,5)\n```\n\n```{r}\n#| echo: true\n#L1 norms:\nsum(abs(u))\nsum(abs(v))\n#L2 norms:\nsqrt(sum(u^2))\nsqrt(sum(v^2))\n```\n:::\n\n::: column\n```{r}\n#| echo: true\n#NOT an L2 norm:\nsum(sqrt(v^2))\n#NOT an L2 norm:\nsqrt(sum(v))^2\n```\n:::\n\n## Mean vectors {.smaller}\n\n*Scaling* is an important concept in this class, and one important scaling ingredient is the *mean vector*.\n\n::: column\n-   Consider the plot of the `cars` data set.\\\n-   The complete data set has $n=50$ rows (i.e., 2-dimensional vectors)\n-   The red diamond in the middle is the *mean vector*\n    -   Horizontal coordinate: mean of top density (Speed)\n    -   Vertical coordinate: mean of right density (Stopping distance)\n:::\n\n::: column\n```{r}\n#| fig-align: right\n#| fig-asp: 1\n# Load required libraries\nlibrary(ggplot2)\nlibrary(ggExtra)\n\n# Make the base scatterplot\np <- ggplot(cars, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 15.4, y = 42.98), pch=18) + \n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\np_with_marginals <- ggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n\n# Display the plot\nprint(p_with_marginals)\n```\n:::\n\n## Mean vector formally defined\n\nGiven $n$ $p-$dimensional vectors $u_i$, the *mean vector* $m$ is simply:\n\n$$m = \\frac{1}{n} \\cdot \\sum_{i=1}^n u_i$$\n\n## Calculating mean vectors in `R`\n\nThere are two ways to find mean vectors in `R`:\n\n1.  `dplyr` approach (allows you to specify which column to average):\n\n```{r}\n#| echo: true\n\n(cars\n %>% summarize(across(.cols = c(speed, dist), .fns = mean))\n)\n```\n\n2.  Base `R` approach (requires all columns to be numeric):\n\n```{r}\n#| echo: true\n\napply(cars, 2, FUN = mean)\n```\n\n## Mean-centering : scale function in R {.smaller}\n\n-   Subtracting the mean vector from the data yields *mean-centered* data: all columns have mean 0.\n\n-   The best way to mean-center columns in `R` is with the `scale` command:\n\n-   `scale` both centers and standardizes (more later); for now we just want centering:\n\n```{r}\n#| echo: true\ncars_centered <- scale(cars, center = TRUE, scale = FALSE)\n```\n\n```{r}\n#| fig-asp: 1\n#| fig-align: center\n\n# Make the base scatterplot\np <- ggplot(cars_centered, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Code for previous plot\n\n```{r}\n#| eval: false\n#| echo: true\n# Make the base scatterplot\nlibrary(tidyverse)\np <- ggplot(cars_centered, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nlibrary(ggExtra)\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Std dev scaling {.smaller}\n\n-   After mean centering, dividing by the standard deviation results in $p-$ vectors that are elementwise mean 0 and standard deviation = 1.\n-   Important implications for measuring length and (later) distance between vectors.\n-   Finding standard deviation vectors:\n\n::: {.column width=\"60%\"}\n`dplyr` approach:\n\n```{r}\n#| echo: true\n(cars\n %>% summarize(across(.cols = c(speed, dist), .fns = sd))\n )\n```\n:::\n\n::: {.column width=\"40%\"}\nBase `R` approach:\n\n```{r}\n#| echo: true\napply(cars, 2, FUN = sd)\n```\n:::\n\n## Full scaling {.smaller}\n\nThe complete scaling can be completed with:\n\n```{r}\n#| echo: true\ncars_scaled <- scale(cars, center = TRUE, scale = TRUE)\n```\n\nNote the attributes return the mean and standard deviation vectors:\n\n```{r}\n#| echo: true\nattr(cars_scaled, \"scaled:center\")\nattr(cars_scaled, \"scaled:scale\")\n```\n\n## Plot of scaled data\n\n```{r}\n#| fig-asp: 1\n#| fig-align: center\n# Make the base scatterplot\np <- ggplot(cars_scaled, aes(x = speed, y = dist)) +\n  geom_point(color = \"steelblue\", size = 3, alpha= .7) +\n  geom_point(color=\"red\", size = 4, aes(x = 0, y = 0), pch=18) + \n  geom_hline(aes(yintercept = 0), linetype = 2) + \n  geom_vline(aes(xintercept = 0), linetype = 2)+\n  theme_classic(base_size = 18) +\n  labs(x = \"Speed\",\n       y = \"Stopping Distance\")\n\n# Add marginal density plots\nggMarginal(p, type = \"density\", fill = \"lightblue\", alpha = 0.5)\n```\n\n## Distances between vectors\n\n-   We've considered the norm (\"length\") of a single vector.\n-   **Distance between vectors** is an important concept in this class, and is related to vector norms.\n-   We'll talk a lot more about distances later; going to consider a more formal vector-based definition now.\n\n## Distance visualized\n\nConsider two vectors $u = (3,1)$ and $v = (1,4)$:\n\n![](images/clipboard-503625232.png){fig-align=\"center\"}\n\n## Distance visualized\n\nSubtracting $u$ from $v$ yields the vector $(-2, 3)$:\n\n![](images/clipboard-292842847.png){fig-align=\"center\"}\n\n## Distance visualized\n\nNote that this vector is exactly the right magnitude and direction for traveling from $u$ to $v$:\n\n![](images/clipboard-2204196700.png){fig-align=\"center\"}\n\n## Distance defined {.smaller}\n\n-   We define the *distance between* vectors$u$ and $v$ be the norm (recall: length) of the vector $u-v$ (or equivalently, the norm of the vector $v-u$).\n\n-   Accordingly, distance can *also* be defined in L1 (\"taxicab\" or \"Manhattan\") or L2 (\"Euclidean\") form.\n\n    $$\n    ||u-v||_1 = \\sum_{i=1}^p |u_i -v_i|\n    $$\n\n$$\n||u-v||_2 = \\sqrt{\\sum_{i=1}^p (u_i -v_i)^2}\n$$\n\n## Calculating distance for example {.smaller}\n\n-   L1 distance: $|3-1| + |1-4| = 5$\n-   L2 distance: $\\sqrt{(3-1)^2 + (1-4)^2} = \\sqrt{13} = 3.61$\n\n![](images/clipboard-503625232.png){fig-align=\"center\"}\n\n## Air pollution data {.smaller}\n\nConsider the `USairpollution` data set from the `HSAUR2` package:\n\n```{r}\n#| echo: true\nlibrary(HSAUR2)\ndata(\"USairpollution\")\nhead(USairpollution)\n```\n\n## Air pollution data {.smaller}\n\n*Pairs plots* are useful ways of visualizing multidimensional data. The `ggpairs` function from `GGally` produces:\n\n```{r}\n#| echo: true\n#| fig-asp: 1\n#| fig-align: center\n\nlibrary(GGally)\nggpairs(data = USairpollution) + \n  theme_bw()\n```\n\n## The `dist` function {.smaller}\n\n-   The `dist()` function can be used to compute distances between $n$ vectors of $p$ dimensions, arranged in 1-row-per-*p*-vector data frames.\n-   By default, `method = 'euclidean'` (L2 distances); see `?dist` for other options.\n-   The following code all pairwise distances between 41 cities in the `USairpollution` data set from the `HSAUR2` package:\n\n```{r}\n#| echo: true\npollution_dist <- dist(USairpollution) \n```\n\nBy default, a distance matrix is lower-triangular. First 6 rows:\n\n``` r\n                Albany Albuquerque  Atlanta Baltimore  Buffalo   Charleston  \nAlbuquerque     155.825                                                                                                                                 \nAtlanta         501.437     415.667                                                                                                                     \nBaltimore       980.193     881.700  482.856                                                                                                            \nBuffalo         492.975     423.745   69.447   504.518                                                                                                  \nCharleston       51.163     199.113  541.855  1022.395  530.326                                                                                         \nChicago        4634.251    4545.006 4136.752  3669.934 4144.490   4672.609 \n```\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n) \n```\n\n1.  Converge `dist` object to a matrix\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\n#| eval: false\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n  %>% mutate(CityA = rownames(.)) #<3>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n3.  Create new column moving the rownames to an actual variable\n\n## Wrangling the `dist` object {.smaller auto-animate=\"true\"}\n\n-   The following code wrangles the `dist` object:\n\n```{r}\n#| echo: true\nlibrary(HSAUR2)\ndata(\"USairpollution\")\ndistance_df <- (pollution_dist\n  %>%  as.matrix  # <1>\n  %>% data.frame  # <2>\n  %>% mutate(CityA = rownames(.)) #<3>\n  %>% pivot_longer(cols = -CityA, \n                   names_to = 'CityB', \n                   values_to = 'Distance') #<4>\n) \n```\n\n1.  Converge `dist` object to a matrix\n2.  Convert $p \\times p$ matrix to a data frame\n3.  Create new column moving the rownames to an actual variable\n4.  Pivot the data\n\n## Result {.smaller}\n\nWe're primed to play!\n\n```{r}\n#| echo: true\nhead(distance_df)\n```\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","output-file":"1.1-linear-algebra.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.6.42","auto-stretch":true,"editor":"visual","title":"1.1 - data as vectors","editor_options":{"chunk_output_type":"console","mode":"source"},"slideNumber":true}}},"projectFormats":[]}