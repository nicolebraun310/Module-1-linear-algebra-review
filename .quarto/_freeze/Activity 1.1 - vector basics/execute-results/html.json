{
  "hash": "f9aa55e0d9744ee8944efa262ab8dfb5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activity 1.1 - vector basics\"\nformat: html\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n***SUBMISSION INSTRUCTIONS***:\n\n1.  Complete this activity, rendering periodically to html to view your output.\\\n2.  When complete, render to pdf:\n\n<!-- -->\n\na.  Click on the **Terminal** window (next to **Console**) and type `quarto install tinytex` then hit *Enter*\nb.  In the `yaml` at the top of this document (the settings inside the `---` at the top), change the format to `format: pdf`\nc.  Render the document, make sure a pdf is created\n\n<!-- -->\n\n3.  Submit **both** the .pdf and the .qmd of this file to D2L.\n\n# Question 1\n\nConsider the 3-dimensional vector $w = c(-5, 2, -3)$.\n\n## A)\n\nFind $||w||_1$, the L1 (aka taxicab or Manhattan) norm of this vector. Show your work!\n\nadd all the absolute values together (5+2+3)\n\nw \\<- c(-5,2,-3)\n\nsum(abs(w))\n\n10\n\n## B)\n\nFind $||w||_2$, the L2 (aka Euclidean) norm of this vector. Show your work!\n\ntake the square root of the sum of the square of all values in w = ((-5^2^ )+(2^2^ ) + (-3^2^ )^1/2^ = (38\\^1/2)\n\nsqrt(sum(w\\^2))\n\n6.164414\n\n## C)\n\nCreate the vector in `R`. Use `R` to verify your computations above.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- c(-5, 2, -3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(abs(w))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(sum(w^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6.164414\n```\n\n\n:::\n:::\n\n\n\n\nsum(abs(w))\n\nsqrt(sum(w\\^2))\n\n# Question 2\n\nConsider the `iris` data set, which comes packaged with a standard `R` installation:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(iris)\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n\n\n## A)\n\nSelect only the sepal and petal variables. How many vectors are there, and what is the dimension of each vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(\"iris\")\nhead(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niris <- iris[, -5]\n```\n:::\n\n\n\n150 vectors with 4 dimensions\n\n## B)\n\nFind the mean and standard deviation vectors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n(iris\n  %>% summarize(across(.cols = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), .fns = mean))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1     5.843333    3.057333        3.758    1.199333\n```\n\n\n:::\n:::\n\n\nmean = (5.84, 3.06, 3.76, 1.20)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(iris\n  %>% summarize(across(.cols = c(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width), .fns = sd))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Sepal.Length Sepal.Width Petal.Length Petal.Width\n1    0.8280661   0.4358663     1.765298   0.7622377\n```\n\n\n:::\n:::\n\n\nsd = (0.83, 0.44, 1.77, 0.76)\n\n## C)\n\nMean-center and scale the data set. Verify that the mean and standard deviation vectors of the scaled data set are $\\vec 0$ and $\\vec 1$, respectively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_scaled <- scale(iris)\n```\n:::\n\n\n\n## D)\n\nFind the centered/scaled vectors for the first two irises. Find the L1 and L2 distances between these two irises \"from scratch,\" then verify your answer using `dist`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris_scaled %>%\n  data.frame() %>%\n  slice(1:2) -> want\n\na <- want[1,]\nb <- want[2,]\nc <- a-b\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(abs(c))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.388667\n```\n\n\n:::\n:::\n\n\nL1 = 1.389\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(sum(c^2))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.172291\n```\n\n\n:::\n:::\n\n\nL2 = 1.17\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist(want, method=\"manhattan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         1\n2 1.388667\n```\n\n\n:::\n:::\n\n\n\n\n# Question 3\n\nReconsider the `USairpollution` data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(HSAUR2)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: tools\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'HSAUR2'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following object is masked from 'package:tidyr':\n\n    household\n```\n\n\n:::\n\n```{.r .cell-code}\ndata(\"USairpollution\")\n```\n:::\n\n\n\n## A)\n\nGOAL: Find the cities that are most and least similar with respect to their pollution. Use `dist` to find L2 distances between the cities. Then use wrangling approaches to find the two cities that are most similar, and two cities that are most dissimilar.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_object <- dist(USairpollution)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\ndistance_pollution=(dist_object\n  %>% as.matrix\n  %>% data.frame\n  %>% mutate(CityA = rownames(.))\n  %>% pivot_longer(cols = -CityA, \n                   names_to = 'CityB', \n                   values_to = 'Distance')\n  %>% filter(CityA < CityB)\n) \n```\n:::\n\n\n\n\n## B)\n\nAssess how scaling the data before computing distance impacts your answer to the previous question.\n\nScaling the data beforehand ensures the values will be standardized so that they will not influence the results poorly.\n\n## C)\n\nWhich city is Minneapolis most similar to? Most dissimilar to?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nminneapolis_data = distance_pollution %>% filter(CityA == \"Minneapolis\" | CityB == \"Minneapolis\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclosest_city = minneapolis_data %>% arrange(Distance)%>%slice(1)\nprint(closest_city)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  CityA  CityB       Distance\n  <chr>  <chr>          <dbl>\n1 Dallas Minneapolis     134.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfarthest_city = minneapolis_data %>% arrange(desc(Distance))%>%slice(1)\nprint(farthest_city)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  CityA   CityB       Distance\n  <chr>   <chr>          <dbl>\n1 Chicago Minneapolis    3727.\n```\n\n\n:::\n:::\n\n\nclosest = Dallas\nfarthest = Chicago\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}